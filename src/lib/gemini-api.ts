
import { toast } from "sonner";

const GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent";

// Interface pour la demande de g√©n√©ration de fiche p√©dagogique
export interface FichePedagogiqueRequest {
  niveau: string;
  titre: string;
  etape?: string;
  activites?: string;
  numero?: string;
  duree?: string;
  date?: string;
  palier?: string;
}

// Interface pour le mod√®le de fiche p√©dagogique s√©n√©galaise
export interface FichePedagogiqueSenegalaise {
  titre: string;
  niveau: string;
  etape?: string;
  activites: string;
  numero: string;
  duree: string;
  date: string;
  competenceBase: string;
  palier: string;
  objectifApprentissage: string;
  objectifsSpecifiques: string;
  contenu: string;
  moyensPedagogiques: string;
  moyensMateriels: string;
  documentation: string;
  objectifLecon: string;
  deroulementLecon: {
    miseEnSituation: {
      enseignant: string;
      eleves: string;
    };
    explorationAcquis: {
      enseignant: string;
      eleves: string;
    };
    constructionSavoir: {
      enseignant: string;
      eleves: string;
    };
    approfondissement: {
      enseignant: string;
      eleves: string;
    };
    production: {
      enseignant: string;
      eleves: string;
    };
    evaluation: {
      enseignant: string;
      eleves: string;
    };
  };
  exercices: {
    qcm: {
      question: string;
      options: string[];
      reponseCorrecte: string;
    };
    texteATrous: {
      texte: string;
      reponse: string;
    };
    exerciceApplication: {
      consigne: string;
      exempleReponse: string;
    };
  };
}

// Fonction pour g√©n√©rer une fiche p√©dagogique avec Gemini
export const generateFichePedagogique = async (
  apiKey: string,
  data: FichePedagogiqueRequest
): Promise<FichePedagogiqueSenegalaise | null> => {
  try {
    // Construction du prompt pour Gemini
    const prompt = `G√©n√®re une fiche p√©dagogique d√©taill√©e conforme au programme scolaire s√©n√©galais üá∏üá≥ pour le niveau ${data.niveau}, avec le titre "${data.titre}".
    Adapte les contenus √† la r√©alit√© √©ducative du S√©n√©gal en int√©grant des exemples du quotidien, des r√©f√©rences culturelles et des contextes locaux.
    
    Format requis:
    - √âtape: ${data.etape || ""}
    - Niveau: ${data.niveau} (Pr√©ciser le contexte scolaire)
    - Activit√©s: ${data.activites || ""}
    - N¬∞: ${data.numero || ""}
    - Dur√©e: ${data.duree || ""}
    - Date: ${data.date || ""}
    
    Inclure:
    - Comp√©tence de base: Identifier la comp√©tence √† d√©velopper selon les r√©f√©rentiels s√©n√©galais.
    - Palier ${data.palier || ""}: Identifier la comp√©tence √† d√©velopper dans le palier selon les r√©f√©rentiels s√©n√©galais.
    - Objectif d'apprentissage (OA): D√©finir l'objectif global de la le√ßon.
    - Objectif sp√©cifique (OS): D√©tail des comp√©tences pr√©cises √† acqu√©rir.
    - Contenu: Pr√©senter les notions abord√©es.
    - Moyens p√©dagogiques: Indiquer les m√©thodes utilis√©es (discussion, observation, jeux √©ducatifs, etc.).
    - Moyens mat√©riels: Mentionner les ressources n√©cessaires (ardoises, images, contes africains, objets du quotidien, etc.).
    - Documentation: Lister les documents de r√©f√©rence utilis√©s (manuel scolaire, guide p√©dagogique, etc.).
    - Objectif de la le√ßon: Expliquer ce que les √©l√®ves doivent √™tre capables de faire apr√®s la le√ßon.
    
    D√©roulement de la le√ßon:
    Structur√© en 6 √©tapes (mise en situation, exploration des acquis, construction du savoir, approfondissement, production, √©valuation) avec pour chacune les activit√©s de l'enseignant et des √©l√®ves.
    
    Exercices:
    - QCM avec question et 4 options (une correcte)
    - Texte √† trous
    - Exercice d'application avec exemple de r√©ponse correcte
    
    R√©ponds en format JSON avec les champs correspondants.`;

    const requestBody = {
      contents: [
        {
          parts: [
            {
              text: prompt
            }
          ]
        }
      ],
      generationConfig: {
        temperature: 0.4,
        topK: 32,
        topP: 0.95,
        maxOutputTokens: 8192,
      }
    };

    const apiKeyParam = `?key=${apiKey}`;
    const response = await fetch(`${GEMINI_API_URL}${apiKeyParam}`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(requestBody),
    });

    if (!response.ok) {
      const errorData = await response.json();
      toast.error(`Erreur API Gemini: ${errorData.error?.message || "Erreur inconnue"}`);
      return null;
    }

    const responseData = await response.json();
    const generatedText = responseData.candidates[0]?.content?.parts[0]?.text || "";
    
    // Extraction du contenu JSON de la r√©ponse
    let jsonMatch;
    try {
      // Essai d'extraction directe
      const parsedResponse = JSON.parse(generatedText.trim());
      return processGeminiResponse(parsedResponse, data);
    } catch (e) {
      // Recherche d'un bloc JSON dans le texte
      jsonMatch = generatedText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        try {
          const jsonContent = jsonMatch[0];
          const parsedResponse = JSON.parse(jsonContent);
          return processGeminiResponse(parsedResponse, data);
        } catch (jsonError) {
          console.error("Erreur lors du parsing JSON:", jsonError);
          toast.error("Impossible d'extraire les donn√©es de la fiche p√©dagogique");
          return null;
        }
      } else {
        console.error("Pas de JSON trouv√© dans la r√©ponse");
        toast.error("Format de r√©ponse non reconnu");
        return null;
      }
    }
  } catch (error) {
    console.error("Erreur lors de la g√©n√©ration de la fiche:", error);
    toast.error("Erreur lors de la g√©n√©ration de la fiche p√©dagogique");
    return null;
  }
};

// Fonction pour traiter et structurer la r√©ponse de Gemini
function processGeminiResponse(response: any, originalRequest: FichePedagogiqueRequest): FichePedagogiqueSenegalaise {
  // Structure par d√©faut avec les donn√©es de base
  const fichePedagogique: FichePedagogiqueSenegalaise = {
    titre: response.titre || originalRequest.titre || "",
    niveau: response.niveau || originalRequest.niveau || "",
    etape: response.etape || originalRequest.etape || "",
    activites: response.activites || originalRequest.activites || "",
    numero: response.numero || originalRequest.numero || "",
    duree: response.duree || originalRequest.duree || "",
    date: response.date || originalRequest.date || new Date().toISOString().split('T')[0],
    competenceBase: response.competenceBase || "",
    palier: response.palier || originalRequest.palier || "",
    objectifApprentissage: response.objectifApprentissage || response.objectifDApprentissage || "",
    objectifsSpecifiques: response.objectifsSpecifiques || response.objectifSpecifique || "",
    contenu: response.contenu || "",
    moyensPedagogiques: response.moyensPedagogiques || "",
    moyensMateriels: response.moyensMateriels || "",
    documentation: response.documentation || "",
    objectifLecon: response.objectifLecon || response.objectifDeLaLecon || "",
    deroulementLecon: {
      miseEnSituation: {
        enseignant: response.deroulementLecon?.miseEnSituation?.enseignant || "",
        eleves: response.deroulementLecon?.miseEnSituation?.eleves || ""
      },
      explorationAcquis: {
        enseignant: response.deroulementLecon?.explorationAcquis?.enseignant || "",
        eleves: response.deroulementLecon?.explorationAcquis?.eleves || ""
      },
      constructionSavoir: {
        enseignant: response.deroulementLecon?.constructionSavoir?.enseignant || "",
        eleves: response.deroulementLecon?.constructionSavoir?.eleves || ""
      },
      approfondissement: {
        enseignant: response.deroulementLecon?.approfondissement?.enseignant || "",
        eleves: response.deroulementLecon?.approfondissement?.eleves || ""
      },
      production: {
        enseignant: response.deroulementLecon?.production?.enseignant || "",
        eleves: response.deroulementLecon?.production?.eleves || ""
      },
      evaluation: {
        enseignant: response.deroulementLecon?.evaluation?.enseignant || "",
        eleves: response.deroulementLecon?.evaluation?.eleves || ""
      }
    },
    exercices: {
      qcm: {
        question: response.exercices?.qcm?.question || "",
        options: response.exercices?.qcm?.options || ["", "", "", ""],
        reponseCorrecte: response.exercices?.qcm?.reponseCorrecte || ""
      },
      texteATrous: {
        texte: response.exercices?.texteATrous?.texte || "",
        reponse: response.exercices?.texteATrous?.reponse || ""
      },
      exerciceApplication: {
        consigne: response.exercices?.exerciceApplication?.consigne || "",
        exempleReponse: response.exercices?.exerciceApplication?.exempleReponse || ""
      }
    }
  };

  return fichePedagogique;
}
